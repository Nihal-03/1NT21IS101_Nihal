P5)Design and implement an algorithm to evaluate an arithmetic expression which maybe any form(postfix), and demonstrate its working with suitable examples.

Aim:- Postfix evaluation

ALGORITHM

STEP1: opndstack=empty stack
STEP2:scan one char at a time from right to left in string
STEP3: if scan char is operand, push it in stack
STEP4: If scan char is operator,pop opnd1 , opnd2 and perform the operation specified
by operator. Push the result into stack.
STEP5:repeat steps 2,3 and 4 until input prefix string ends
STEP6:pop opndstack and display, which is required value of given expression
//postfix evaluation

#include<stdio.h>
#include<ctype.h>
int stack[20]; // stack size
int top=-1; //initializing top to -1

void push(int x) //push function
{
stack[++top]=x;
}


int pop() //pop function
{
return stack[top--];
}

int main()
{
 char exp[20]; //expression size
 char *e; //e to store expression
 int n1,n2,n3,num; //n1 and n2 r the operands n3 to store sum value
 printf("enter the number ;");
 scanf("%s",exp);
 e=exp; //e is pointing to expression
 while(*e!='\0')
 {
   if(isdigit(*e)) // to check if it is a digit or not
   {
     num=*e-48; 
     push(num);
     }
     else
     {
     n1=pop(); // top operand pops out
     n2=pop(); //second pop operand pops out
     switch(*e) //switch to check the operator
     { 
        case'+':n3=n1+n2; //addition
                break;
        case'-':n3=n1-n2; //subtraction
                break;
        case'*':n3=n1*n2; //multiplication
                break;
        case'/':n3=n1/n2; //di
                break;
      }
      push(n3);
     }
     e++;
   }  
   
   printf("the result of the expression %s=%d",exp,pop());
   return 0;
 } 
